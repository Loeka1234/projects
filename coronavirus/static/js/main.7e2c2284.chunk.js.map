{"version":3,"sources":["components/NavBar.js","components/dayOneChart.js","pages/home.js","pages/stats.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","title","fontSize","flexGrow","textAlign","footerText","color","letterSpacing","classes","children","AppBar","position","Button","component","Link","to","Typography","variant","className","flex","display","justifyContent","country","useState","state","setState","useEffect","axios","get","then","res","data","console","log","chart","series","name","map","item","Confirmed","Deaths","Recovered","options","colors","height","type","zoom","enabled","toolbar","show","dataLabels","stroke","curve","text","charAt","toUpperCase","slice","align","style","fontWeight","fontFamily","grid","row","opacity","xaxis","categories","Date","toDateString","labels","CircularProgress","homePage","selectedIndex","Countries","Global","loading","handleChange","value","Country","includes","indexOf","getData","catch","err","error","setTimeout","this","props","Grid","container","sm","xs","leftGrid","stats","TotalConfirmed","TotalDeaths","TotalRecovered","Autocomplete","comboBox","autoComplete","autoHighlight","getOptionLabel","option","onChange","event","renderInput","params","TextField","label","Slug","size","Component","theme","alignItems","flexDirection","marginTop","margin","breakpoints","up","down","statsPage","page","sort","direction","handleClick","e","currentTarget","id","order","countries","sorted","a","b","comparison","countryA","slug","countryB","maxPages","Math","ceil","length","countriesToShow","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","onClick","TableSortLabel","active","TableBody","key","CountryCode","scope","bold","NewConfirmed","NewDeaths","NewRecovered","pagination","IconButton","marginLeft","marginRight","createMuiTheme","palette","primary","main","contrastText","secondary","App","exact","path","home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7e2c2284.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// MUI\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport ToolBar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = {\r\n    title: {\r\n        fontSize: \"1.3rem\",\r\n        flexGrow: \"2\",\r\n        textAlign: \"right\"\r\n    },\r\n    footerText: {\r\n        color: \"white\",\r\n        fontSize: \"1rem\",\r\n        letterSpacing: \"0.2rem\"\r\n    }\r\n};\r\n\r\nconst NavBar = ({ classes, children }) => {\r\n    return (\r\n        <>\r\n            <AppBar position=\"sticky\">\r\n                <ToolBar>\r\n                    <Button color=\"inherit\" component={Link} to=\"/\">\r\n                        Home\r\n                    </Button>\r\n                    <Button color=\"inherit\" component={Link} to=\"/stats\">\r\n                        Stats\r\n                    </Button>\r\n                    <Button color=\"inherit\" component={Link} to=\"/about\">\r\n                        About\r\n                    </Button>\r\n                    <Typography variant=\"h1\" className={classes.title}>\r\n                        Coronavirus stats\r\n                    </Typography>\r\n                </ToolBar>\r\n            </AppBar>\r\n            {children}\r\n            <div className=\"footer\">\r\n                <Typography variant=\"h1\" className={classes.footerText} >© Loeka Lievens 2020</Typography>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(NavBar);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\n// MUI\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst styles = {\r\n    flex: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\"\r\n    }\r\n}\r\n\r\nconst DayOneChart = ({ country, classes }) => {\r\n    const [state, setState] = useState({});\r\n    useEffect(() => {\r\n        axios\r\n            .get(\r\n                `https://api.covid19api.com/total/dayone/country/${country}`\r\n            )\r\n            .then(res => {\r\n                const { data } = res;\r\n                console.log(data);\r\n                setState({\r\n                    chart: {\r\n                        series: [\r\n                            {\r\n                                name: \"Total Confirmed Cases\",\r\n                                data: data.map(item => item.Confirmed),\r\n                            },\r\n                            {\r\n                                name: \"Total Deaths\",\r\n                                data: data.map(item => item.Deaths),\r\n                            },\r\n                            {\r\n                                name: \"Total Recovered\",\r\n                                data: data.map(item => item.Recovered),\r\n                            },\r\n                        ],\r\n                        options: {\r\n                            colors: [\"#000000\", \"#DA1F33\", \"#82FF6B\"],\r\n                            chart: {\r\n                                height: 350,\r\n                                type: \"line\",\r\n                                zoom: {\r\n                                    enabled: false,\r\n                                },\r\n                                toolbar: {\r\n                                    show: false\r\n                                }\r\n                            },\r\n                            dataLabels: {\r\n                                enabled: false\r\n                            },\r\n                            stroke: {\r\n                                curve: \"straight\",\r\n                                colors: [\"black\", \"#DA1F33\", \"#3BEE5D\"]\r\n                            },\r\n                            title: {\r\n                                text: `Covid-19 statistics ${country.charAt(0).toUpperCase() + country.slice(1)}`,\r\n                                align: \"center\",\r\n                                style: {\r\n                                    fontWeight: 500,\r\n                                    fontFamily: \"-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif\"\r\n                                }\r\n                            },\r\n                            grid: {\r\n                                row: {\r\n                                    colors: [\"#f3f3f3\", \"transparent\"], // takes an array which will be repeated on columns\r\n                                    opacity: 0.5,\r\n                                },\r\n                            },\r\n                            xaxis: {\r\n                                type: \"datetime\",\r\n                                categories: data.map(item =>\r\n                                    new Date(item.Date).toDateString()\r\n                                ),\r\n                                labels: {\r\n                                    show: false\r\n                                },\r\n                            },\r\n                        },\r\n                    },\r\n                });\r\n            });\r\n    }, [country]);\r\n    return state.chart ? (\r\n        <Chart options={state.chart.options} series={state.chart.series} />\r\n    ) : (\r\n        <div className={classes.flex}><CircularProgress/></div>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(DayOneChart);\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// Components\r\nimport DayOneChart from \"../components/dayOneChart\";\r\n\r\n// MUI\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TypoGraphy from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst styles = theme => ({\r\n    leftGrid: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n        marginTop: \"2rem\",\r\n    },\r\n    comboBox: {\r\n        margin: \"2rem\",\r\n    },\r\n    chart: {\r\n        [theme.breakpoints.up(\"md\")]: {\r\n            margin: \"2rem\",\r\n        },\r\n    },\r\n    stats: {\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            fontSize: \"1.5rem\",\r\n        },\r\n    },\r\n});\r\n\r\nclass homePage extends Component {\r\n    state = {\r\n        selectedIndex: null,\r\n        data: {\r\n            Countries: [],\r\n            Global: {},\r\n        },\r\n        loading: true,\r\n    };\r\n\r\n    handleChange = value => {\r\n        const { Countries } = this.state.data;\r\n        if (value && value.Country === \"Global\")\r\n            this.setState({ selectedIndex: null });\r\n        else if (Countries.includes(value)) {\r\n            this.setState({ selectedIndex: Countries.indexOf(value) });\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n\r\n    getData = () => {\r\n        axios\r\n            .get(\"https://api.covid19api.com/summary\")\r\n            .then(data => {\r\n                this.setState({ data: data.data, loading: false });\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                setTimeout(() => {\r\n                    this.getData();\r\n                }, 1000);\r\n            });\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const {\r\n            selectedIndex,\r\n            loading,\r\n            data: { Countries, Global },\r\n        } = this.state;\r\n        return (\r\n            <div className={loading ? \"homepage loading\" : \"homepage\"}>\r\n                {!loading && (\r\n                    <Grid container>\r\n                        <Grid item sm={5} xs={12} className={classes.leftGrid}>\r\n                            <TypoGraphy variant=\"h3\">\r\n                                {selectedIndex !== null\r\n                                    ? Countries[selectedIndex].Country\r\n                                    : \"Global\"}\r\n                            </TypoGraphy>\r\n                            <TypoGraphy className={classes.stats} variant=\"h4\">\r\n                                Total confirmed cases:{\" \"}\r\n                                {selectedIndex !== null\r\n                                    ? Countries[selectedIndex].TotalConfirmed\r\n                                    : Global.TotalConfirmed}\r\n                            </TypoGraphy>\r\n                            <TypoGraphy className={classes.stats} variant=\"h4\">\r\n                                Total deaths:{\" \"}\r\n                                {selectedIndex !== null\r\n                                    ? Countries[selectedIndex].TotalDeaths\r\n                                    : Global.TotalDeaths}\r\n                            </TypoGraphy>\r\n                            <TypoGraphy className={classes.stats} variant=\"h4\">\r\n                                Total recovered:{\" \"}\r\n                                {selectedIndex !== null\r\n                                    ? Countries[selectedIndex].TotalRecovered\r\n                                    : Global.TotalRecovered}\r\n                            </TypoGraphy>\r\n                        </Grid>\r\n                        <Grid item sm={7} xs={12}>\r\n                            <Autocomplete\r\n                                className={classes.comboBox}\r\n                                autoComplete\r\n                                autoHighlight\r\n                                options={[\r\n                                    {\r\n                                        Country: \"Global\",\r\n                                        ...this.state.data.Global,\r\n                                    },\r\n                                    ...this.state.data.Countries,\r\n                                ]}\r\n                                getOptionLabel={option => option.Country}\r\n                                onChange={(event, value) =>\r\n                                    this.handleChange(value)\r\n                                }\r\n                                renderInput={params => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        label=\"Country\"\r\n                                        variant=\"outlined\"\r\n                                    />\r\n                                )}\r\n                            />\r\n                            {selectedIndex !== null && (\r\n                                <div className={classes.chart}>\r\n                                    <DayOneChart\r\n                                        country={Countries[selectedIndex].Slug}\r\n                                    />\r\n                                </div>\r\n                            )}\r\n                        </Grid>\r\n                    </Grid>\r\n                )}\r\n                {loading && <CircularProgress size={65} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(homePage);\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// MUI\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\n// Icons\r\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\r\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\r\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\r\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\r\n\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\nconst styles = {\r\n    bold: {\r\n        fontWeight: \"bold\",\r\n    },\r\n    pagination: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        marginLeft: \"3%\",\r\n        marginRight: \"3%\",\r\n    },\r\n};\r\n\r\nclass statsPage extends Component {\r\n    state = {\r\n        page: 1,\r\n        sort: \"Slug\",\r\n        direction: \"desc\",\r\n    };\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    getData = () => {\r\n        axios\r\n            .get(\"https://api.covid19api.com/summary\")\r\n            .then(data => {\r\n                this.setState({ data: data.data, loading: false });\r\n            })\r\n            .catch(err => {\r\n                console.error(err);\r\n                setTimeout(() => {\r\n                    this.getData();\r\n                }, 1000);\r\n            });\r\n    };\r\n    handleClick = e => {\r\n        const sort = e.currentTarget.id;\r\n        if (this.state.sort === sort)\r\n            this.setState({\r\n                direction: this.state.direction === \"desc\" ? \"asc\" : \"desc\",\r\n            });\r\n        else this.setState({ sort: e.currentTarget.id, order: \"asc\" });\r\n    };\r\n    sort = countries => {\r\n        let sorted = countries;\r\n        const { sort, direction } = this.state;\r\n        if (direction === \"asc\")\r\n            sorted = countries.sort((a, b) => (a[sort] > b[sort] ? -1 : 1));\r\n        else if (direction === \"desc\")\r\n            sorted = countries.sort((a, b) => (a[sort] > b[sort] ? 1 : -1));\r\n\r\n        return sorted;\r\n    };\r\n    comparison = (a, b) => {\r\n        const countryA = a.slug;\r\n        const countryB = b.slug;\r\n        if (countryA > countryB) return 1;\r\n        else if (countryA < countryB) return -1;\r\n    };\r\n    render() {\r\n        if (!this.state.data)\r\n            return (\r\n                <div className=\"statspage loading\">\r\n                    <CircularProgress size={65} />\r\n                </div>\r\n            );\r\n\r\n        const sorted = this.sort(this.state.data.Countries);\r\n\r\n        // Paginate\r\n        const maxPages = Math.ceil(sorted.length / 10);\r\n        const { page } = this.state;\r\n        if (page > maxPages) this.setState({ page: maxPages });\r\n        else if (page < 1) this.setState({ page: 1 });\r\n        const countriesToShow = sorted.slice(page * 10 - 10, page * 10);\r\n\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className=\"statspage\">\r\n                <TableContainer component={Paper}>\r\n                    <Table aria-label=\"simple table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell onClick={this.handleClick} id=\"Slug\">\r\n                                    <TableSortLabel\r\n                                        active={this.state.sort === \"Slug\"}\r\n                                        direction={this.state.direction}\r\n                                    />\r\n                                    Country\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    onClick={this.handleClick}\r\n                                    id=\"TotalConfirmed\"\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={\r\n                                            this.state.sort === \"TotalConfirmed\"\r\n                                        }\r\n                                        direction={this.state.direction}\r\n                                    />\r\n                                    Total Confirmed cases\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    onClick={this.handleClick}\r\n                                    id=\"NewConfirmed\"\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={\r\n                                            this.state.sort === \"NewConfirmed\"\r\n                                        }\r\n                                        direction={this.state.direction}\r\n                                    />\r\n                                    New Confirmed cases\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    onClick={this.handleClick}\r\n                                    id=\"TotalDeaths\"\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={\r\n                                            this.state.sort === \"TotalDeaths\"\r\n                                        }\r\n                                        direction={this.state.direction}\r\n                                    />\r\n                                    Total Confirmed Deaths\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    onClick={this.handleClick}\r\n                                    id=\"NewDeaths\"\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={this.state.sort === \"NewDeaths\"}\r\n                                        direction={this.state.direction}\r\n                                    />\r\n                                    New Confirmed Deaths\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    onClick={this.handleClick}\r\n                                    id=\"TotalRecovered\"\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={\r\n                                            this.state.sort === \"TotalRecovered\"\r\n                                        }\r\n                                        direction={this.state.direction}\r\n                                    />\r\n                                    Total Recovered\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    onClick={this.handleClick}\r\n                                    id=\"NewRecovered\"\r\n                                >\r\n                                    <TableSortLabel\r\n                                        active={\r\n                                            this.state.sort === \"NewRecovered\"\r\n                                        }\r\n                                        direction={this.state.direction}\r\n                                    />\r\n                                    New Recovered\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {countriesToShow.map(country => (\r\n                                <TableRow key={country.CountryCode}>\r\n                                    <TableCell\r\n                                        component=\"th\"\r\n                                        scope=\"row\"\r\n                                        className={classes.bold}\r\n                                    >\r\n                                        {country.Country}\r\n                                    </TableCell>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {country.TotalConfirmed}\r\n                                    </TableCell>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {country.NewConfirmed}\r\n                                    </TableCell>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {country.TotalDeaths}\r\n                                    </TableCell>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {country.NewDeaths}\r\n                                    </TableCell>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {country.TotalRecovered}\r\n                                    </TableCell>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        {country.NewRecovered}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                    <div className={classes.pagination}>\r\n                        <Typography variant=\"body1\">\r\n                            Page: {this.state.page}\r\n                        </Typography>\r\n                        <div>\r\n                            <IconButton\r\n                                onClick={() => this.setState({ page: 1 })}\r\n                            >\r\n                                <FirstPageIcon />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                onClick={() =>\r\n                                    this.setState({\r\n                                        page:\r\n                                            this.state.page > 1\r\n                                                ? this.state.page - 1\r\n                                                : this.state.page,\r\n                                    })\r\n                                }\r\n                            >\r\n                                <KeyboardArrowLeft />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                onClick={() =>\r\n                                    this.setState({\r\n                                        page: this.state.page + 1,\r\n                                    })\r\n                                }\r\n                            >\r\n                                <KeyboardArrowRight />\r\n                            </IconButton>\r\n                            <IconButton\r\n                                onClick={() =>\r\n                                    this.setState({ page: maxPages })\r\n                                }\r\n                            >\r\n                                <LastPageIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(statsPage);\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport { ThemeProvider as MuiThemeProvider } from \"@material-ui/core/styles\";\n\n// Components\nimport NavBar from \"./components/NavBar\";\n\n// Pages\nimport home from \"./pages/home\";\nimport stats from \"./pages/stats\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: \"#DA1F33\",\n            contrastText: \"#fff\",\n        },\n        secondary: {\n            main: \"#ff3d00\",\n            contrastText: \"#fff\",\n        },\n    },\n});\n\nfunction App() {\n    return (\n        <MuiThemeProvider theme={theme}>\n            <Router>\n                <NavBar>\n                    <Switch>\n                        <Route exact path=\"/stats\" component={stats} />\n                        <Route exact path=\"/about\" component={home} />\n                        <Route exact path=\"/\" component={home} />\n                    </Switch>\n                </NavBar>\n            </Router>\n        </MuiThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}